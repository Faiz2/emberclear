stages:
  - setup
  - quality
  - test
  - build
  - analyze
  - deploy

# cache:
#   # untracked: true
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - ${CI_PROJECT_DIR}/.cache_yarn
#     - ${CI_PROJECT_DIR}/packages/frontend/node_modules

image: node:10
# image: danlynn/ember-cli:3.4.2

variables:
  YARN_CACHE_FOLDER: ${CI_PROJECT_DIR}/.cache_yarn
  DOCKER_DRIVER: overlay2
  NETLIFY_CLI_VERSION: 0.4.0
  NODE_OPTIONS: --max-old-space-size=2048



# Gitlab's pipelines have about 3.5 minutes of overhead per stage
# see previous run: https://gitlab.com/NullVoxPopuli/emberclear/pipelines/24394951/builds
# where all the pipeline steps are split out
#
# This one stage takes on average: 6-8 minutes
# All the stages take on average: 20-25 minutes
#
# This likely due to the (un)zipping of cache
# and network transfer between gitlab and wherever cache is stored.
#
# Using a self-hosted gitlab-runner with local-to-the-runner-cache
# would be a huge win.
#
# TODO: look into free-tier IaaS machines for hosting a gitlab-runner
# the-everything-stage-for-speed:
#   stage: build
#   tags: [ docker ]
#   script:
#     # TODO: extract all this to bash script?
#     - rm -rf ./packages/frontend/{dist,tmp,node_modules,yarn.lock}
#     - ( cd ./packages/frontend && yarn install && yarn test )
#     - time ./scripts/deploy

# TODO: HACK: for now, it's faster to install everything
#       than it is to rely on gitlab's slow cache
before_script:
  - time ./run yarn install

lint:js:
  stage: quality
  dependencies: [ setup ]
  script: 
    - time ./run yarn lint:js

lint:hbs:
  stage: quality
  allow_failure: true
  dependencies: [ setup ]
  script: 
    - time ./run yarn lint:hbs

# TODO: coverage?
test:
  stage: test
  dependencies: [ setup ]
  script: 
    - time ./scripts/install-chrome-apt
    - time ./run yarn test

Build Production:
  stage: build
  dependencies: [ setup ]
  only: [ master ]
  script:
    - time ./run clean:frontend-build
    - time ./run yarn build:production
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/dist

Analyze Bundle:
  stage: analyze
  dependencies: 
    - Build Production
  only: [ master ]
  script:
    - time ./run yarn analyze
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/dist  

Deploy Production:
  stage: deploy
  only: [ master ]
  script:
    - time ./scripts/deploy

setup:
  stage: setup
  script: [ time ./run yarn install ]
